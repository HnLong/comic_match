/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['tapi.js']) {
  _$jscoverage['tapi.js'] = [];
  _$jscoverage['tapi.js'][7] = 0;
  _$jscoverage['tapi.js'][13] = 0;
  _$jscoverage['tapi.js'][14] = 0;
  _$jscoverage['tapi.js'][15] = 0;
  _$jscoverage['tapi.js'][16] = 0;
  _$jscoverage['tapi.js'][17] = 0;
  _$jscoverage['tapi.js'][19] = 0;
  _$jscoverage['tapi.js'][43] = 0;
  _$jscoverage['tapi.js'][44] = 0;
  _$jscoverage['tapi.js'][46] = 0;
  _$jscoverage['tapi.js'][47] = 0;
  _$jscoverage['tapi.js'][49] = 0;
  _$jscoverage['tapi.js'][50] = 0;
  _$jscoverage['tapi.js'][54] = 0;
  _$jscoverage['tapi.js'][55] = 0;
  _$jscoverage['tapi.js'][56] = 0;
  _$jscoverage['tapi.js'][58] = 0;
  _$jscoverage['tapi.js'][62] = 0;
  _$jscoverage['tapi.js'][63] = 0;
  _$jscoverage['tapi.js'][64] = 0;
  _$jscoverage['tapi.js'][74] = 0;
  _$jscoverage['tapi.js'][75] = 0;
  _$jscoverage['tapi.js'][85] = 0;
  _$jscoverage['tapi.js'][96] = 0;
  _$jscoverage['tapi.js'][107] = 0;
  _$jscoverage['tapi.js'][115] = 0;
  _$jscoverage['tapi.js'][116] = 0;
  _$jscoverage['tapi.js'][117] = 0;
  _$jscoverage['tapi.js'][119] = 0;
  _$jscoverage['tapi.js'][120] = 0;
  _$jscoverage['tapi.js'][121] = 0;
  _$jscoverage['tapi.js'][122] = 0;
  _$jscoverage['tapi.js'][123] = 0;
  _$jscoverage['tapi.js'][124] = 0;
  _$jscoverage['tapi.js'][125] = 0;
  _$jscoverage['tapi.js'][127] = 0;
  _$jscoverage['tapi.js'][129] = 0;
  _$jscoverage['tapi.js'][130] = 0;
  _$jscoverage['tapi.js'][131] = 0;
  _$jscoverage['tapi.js'][132] = 0;
  _$jscoverage['tapi.js'][133] = 0;
  _$jscoverage['tapi.js'][134] = 0;
  _$jscoverage['tapi.js'][136] = 0;
  _$jscoverage['tapi.js'][138] = 0;
  _$jscoverage['tapi.js'][139] = 0;
  _$jscoverage['tapi.js'][160] = 0;
  _$jscoverage['tapi.js'][161] = 0;
  _$jscoverage['tapi.js'][163] = 0;
  _$jscoverage['tapi.js'][183] = 0;
  _$jscoverage['tapi.js'][184] = 0;
  _$jscoverage['tapi.js'][186] = 0;
  _$jscoverage['tapi.js'][203] = 0;
  _$jscoverage['tapi.js'][204] = 0;
  _$jscoverage['tapi.js'][206] = 0;
  _$jscoverage['tapi.js'][207] = 0;
  _$jscoverage['tapi.js'][219] = 0;
  _$jscoverage['tapi.js'][220] = 0;
  _$jscoverage['tapi.js'][241] = 0;
  _$jscoverage['tapi.js'][256] = 0;
  _$jscoverage['tapi.js'][257] = 0;
  _$jscoverage['tapi.js'][259] = 0;
  _$jscoverage['tapi.js'][281] = 0;
  _$jscoverage['tapi.js'][303] = 0;
  _$jscoverage['tapi.js'][327] = 0;
  _$jscoverage['tapi.js'][349] = 0;
  _$jscoverage['tapi.js'][374] = 0;
  _$jscoverage['tapi.js'][375] = 0;
  _$jscoverage['tapi.js'][376] = 0;
  _$jscoverage['tapi.js'][378] = 0;
  _$jscoverage['tapi.js'][379] = 0;
  _$jscoverage['tapi.js'][380] = 0;
  _$jscoverage['tapi.js'][399] = 0;
  _$jscoverage['tapi.js'][400] = 0;
  _$jscoverage['tapi.js'][404] = 0;
  _$jscoverage['tapi.js'][405] = 0;
  _$jscoverage['tapi.js'][406] = 0;
  _$jscoverage['tapi.js'][408] = 0;
  _$jscoverage['tapi.js'][434] = 0;
  _$jscoverage['tapi.js'][446] = 0;
  _$jscoverage['tapi.js'][461] = 0;
  _$jscoverage['tapi.js'][476] = 0;
  _$jscoverage['tapi.js'][502] = 0;
  _$jscoverage['tapi.js'][522] = 0;
  _$jscoverage['tapi.js'][544] = 0;
  _$jscoverage['tapi.js'][568] = 0;
  _$jscoverage['tapi.js'][593] = 0;
  _$jscoverage['tapi.js'][594] = 0;
  _$jscoverage['tapi.js'][595] = 0;
  _$jscoverage['tapi.js'][597] = 0;
  _$jscoverage['tapi.js'][598] = 0;
  _$jscoverage['tapi.js'][599] = 0;
  _$jscoverage['tapi.js'][617] = 0;
  _$jscoverage['tapi.js'][618] = 0;
  _$jscoverage['tapi.js'][620] = 0;
  _$jscoverage['tapi.js'][638] = 0;
  _$jscoverage['tapi.js'][639] = 0;
  _$jscoverage['tapi.js'][641] = 0;
  _$jscoverage['tapi.js'][652] = 0;
  _$jscoverage['tapi.js'][673] = 0;
  _$jscoverage['tapi.js'][691] = 0;
  _$jscoverage['tapi.js'][709] = 0;
  _$jscoverage['tapi.js'][725] = 0;
  _$jscoverage['tapi.js'][726] = 0;
  _$jscoverage['tapi.js'][727] = 0;
  _$jscoverage['tapi.js'][729] = 0;
  _$jscoverage['tapi.js'][733] = 0;
  _$jscoverage['tapi.js'][746] = 0;
  _$jscoverage['tapi.js'][751] = 0;
  _$jscoverage['tapi.js'][756] = 0;
}
_$jscoverage['tapi.js'][7]++;
"use strict";
_$jscoverage['tapi.js'][13]++;
var utils = require("./utils");
_$jscoverage['tapi.js'][14]++;
var TSinaAPI = require("./tsina");
_$jscoverage['tapi.js'][15]++;
var TQQAPI = require("./tqq");
_$jscoverage['tapi.js'][16]++;
var WeiboAPI = require("./weibo");
_$jscoverage['tapi.js'][17]++;
var GithubAPI = require("./github");
_$jscoverage['tapi.js'][19]++;
var TAPI = module.exports = {TYPES: {weibo: WeiboAPI, github: GithubAPI, tsina: TSinaAPI, tqq: TQQAPI}, enables: {}, init: (function (blogtype, appkey, secret, oauth_options) {
  _$jscoverage['tapi.js'][43]++;
  if (! appkey) {
    _$jscoverage['tapi.js'][44]++;
    throw new TypeError("appkey must be set");
  }
  _$jscoverage['tapi.js'][46]++;
  if (! secret) {
    _$jscoverage['tapi.js'][47]++;
    throw new TypeError("secret must be set");
  }
  _$jscoverage['tapi.js'][49]++;
  if (typeof oauth_options === "string") {
    _$jscoverage['tapi.js'][50]++;
    oauth_options = {oauth_callback: oauth_options};
  }
  _$jscoverage['tapi.js'][54]++;
  var TypeAPI = this.TYPES[blogtype];
  _$jscoverage['tapi.js'][55]++;
  if (! TypeAPI) {
    _$jscoverage['tapi.js'][56]++;
    throw new TypeError(blogtype + " api not exists");
  }
  _$jscoverage['tapi.js'][58]++;
  var options = {appkey: appkey, secret: secret};
  _$jscoverage['tapi.js'][62]++;
  options = utils.extend(options, oauth_options);
  _$jscoverage['tapi.js'][63]++;
  var instance = new TypeAPI(options);
  _$jscoverage['tapi.js'][64]++;
  this.enables[blogtype] = instance;
}), api_dispatch: (function (user) {
  _$jscoverage['tapi.js'][74]++;
  var apiType = user.blogtype || user.blogType;
  _$jscoverage['tapi.js'][75]++;
  return this.enables[apiType];
}), get_config: (function (user) {
  _$jscoverage['tapi.js'][85]++;
  return this.api_dispatch(user).config;
}), support: (function (user, method) {
  _$jscoverage['tapi.js'][96]++;
  return this.get_config(user)["support_" + method] !== false;
}), process_text: (function (user, status) {
  _$jscoverage['tapi.js'][107]++;
  return this.api_dispatch(user).process_text(status);
}), _timeline: (function (method, user, cursor, callback) {
  _$jscoverage['tapi.js'][115]++;
  if (typeof cursor === "function") {
    _$jscoverage['tapi.js'][116]++;
    callback = cursor;
    _$jscoverage['tapi.js'][117]++;
    cursor = null;
  }
  _$jscoverage['tapi.js'][119]++;
  cursor = cursor || {};
  _$jscoverage['tapi.js'][120]++;
  cursor.count = cursor.count || 20;
  _$jscoverage['tapi.js'][121]++;
  var max_id = cursor.max_id;
  _$jscoverage['tapi.js'][122]++;
  var self = this;
  _$jscoverage['tapi.js'][123]++;
  return self.api_dispatch(user)[method](user, cursor, (function (err, result) {
  _$jscoverage['tapi.js'][124]++;
  if (err || ! max_id) {
    _$jscoverage['tapi.js'][125]++;
    return callback(err, result);
  }
  _$jscoverage['tapi.js'][127]++;
  max_id = String(max_id);
  _$jscoverage['tapi.js'][129]++;
  var needs = [];
  _$jscoverage['tapi.js'][130]++;
  var statuses = result.items || [];
  _$jscoverage['tapi.js'][131]++;
  for (var i = 0, l = statuses.length; i < l; i++) {
    _$jscoverage['tapi.js'][132]++;
    var status = statuses[i];
    _$jscoverage['tapi.js'][133]++;
    if (status.id === max_id) {
      _$jscoverage['tapi.js'][134]++;
      continue;
    }
    _$jscoverage['tapi.js'][136]++;
    needs.push(status);
}
  _$jscoverage['tapi.js'][138]++;
  result.items = needs;
  _$jscoverage['tapi.js'][139]++;
  callback(null, result);
}));
}), update: (function (user, status, callback) {
  _$jscoverage['tapi.js'][160]++;
  if (typeof status === "string") {
    _$jscoverage['tapi.js'][161]++;
    status = {status: status};
  }
  _$jscoverage['tapi.js'][163]++;
  return this.api_dispatch(user).update(user, status, callback);
}), upload: (function (user, status, pic, callback) {
  _$jscoverage['tapi.js'][183]++;
  if (typeof status === "string") {
    _$jscoverage['tapi.js'][184]++;
    status = {status: status};
  }
  _$jscoverage['tapi.js'][186]++;
  return this.api_dispatch(user).upload(user, status, pic, callback);
}), repost: (function (user, id, status, callback) {
  _$jscoverage['tapi.js'][203]++;
  if (typeof status === "string") {
    _$jscoverage['tapi.js'][204]++;
    status = {status: status};
  }
  _$jscoverage['tapi.js'][206]++;
  id = String(id);
  _$jscoverage['tapi.js'][207]++;
  return this.api_dispatch(user).repost(user, id, status, callback);
}), destroy: (function (user, id, callback) {
  _$jscoverage['tapi.js'][219]++;
  id = String(id);
  _$jscoverage['tapi.js'][220]++;
  return this.api_dispatch(user).destroy(user, id, callback);
}), show: (function (user, id, callback) {
  _$jscoverage['tapi.js'][241]++;
  return this.api_dispatch(user).show(user, String(id), callback);
}), count: (function (user, ids, callback) {
  _$jscoverage['tapi.js'][256]++;
  if (Array.isArray(ids)) {
    _$jscoverage['tapi.js'][257]++;
    ids = ids.join(",");
  }
  _$jscoverage['tapi.js'][259]++;
  return this.api_dispatch(user).count(user, ids, callback);
}), home_timeline: (function (user, cursor, callback) {
  _$jscoverage['tapi.js'][281]++;
  return this._timeline("home_timeline", user, cursor, callback);
}), public_timeline: (function (user, cursor, callback) {
  _$jscoverage['tapi.js'][303]++;
  return this._timeline("public_timeline", user, cursor, callback);
}), user_timeline: (function (user, cursor, callback) {
  _$jscoverage['tapi.js'][327]++;
  return this._timeline("user_timeline", user, cursor, callback);
}), mentions: (function (user, cursor, callback) {
  _$jscoverage['tapi.js'][349]++;
  return this._timeline("mentions", user, cursor, callback);
}), repost_timeline: (function (user, id, cursor, callback) {
  _$jscoverage['tapi.js'][374]++;
  if (typeof cursor === "function") {
    _$jscoverage['tapi.js'][375]++;
    callback = cursor;
    _$jscoverage['tapi.js'][376]++;
    cursor = null;
  }
  _$jscoverage['tapi.js'][378]++;
  cursor = cursor || {};
  _$jscoverage['tapi.js'][379]++;
  cursor.id = id;
  _$jscoverage['tapi.js'][380]++;
  return this._timeline("repost_timeline", user, cursor, callback);
}), search: (function (user, query, cursor, callback) {
  _$jscoverage['tapi.js'][399]++;
  if (typeof query === "string") {
    _$jscoverage['tapi.js'][400]++;
    query = {q: query};
  }
  _$jscoverage['tapi.js'][404]++;
  if (typeof cursor === "function") {
    _$jscoverage['tapi.js'][405]++;
    callback = cursor;
    _$jscoverage['tapi.js'][406]++;
    cursor = null;
  }
  _$jscoverage['tapi.js'][408]++;
  return this.api_dispatch(user).search(user, query, cursor, callback);
}), favorites: (function (user, cursor, callback) {
  _$jscoverage['tapi.js'][434]++;
  return this._timeline("favorites", user, cursor, callback);
}), favorite_show: (function (user, id, callback) {
  _$jscoverage['tapi.js'][446]++;
  return this.api_dispatch(user).favorite_show(user, id, callback);
}), favorite_create: (function (user, id, callback) {
  _$jscoverage['tapi.js'][461]++;
  return this.api_dispatch(user).favorite_create(user, id, callback);
}), favorite_destroy: (function (user, id, callback) {
  _$jscoverage['tapi.js'][476]++;
  return this.api_dispatch(user).favorite_destroy(user, id, callback);
}), comments_timeline: (function (user, cursor, callback) {
  _$jscoverage['tapi.js'][502]++;
  return this._timeline("comments_timeline", user, cursor, callback);
}), comments_mentions: (function (user, cursor, callback) {
  _$jscoverage['tapi.js'][522]++;
  return this._timeline("comments_mentions", user, cursor, callback);
}), comments_by_me: (function (user, cursor, callback) {
  _$jscoverage['tapi.js'][544]++;
  return this._timeline("comments_by_me", user, cursor, callback);
}), comments_to_me: (function (user, cursor, callback) {
  _$jscoverage['tapi.js'][568]++;
  return this._timeline("comments_to_me", user, cursor, callback);
}), comments: (function (user, id, cursor, callback) {
  _$jscoverage['tapi.js'][593]++;
  if (typeof cursor === "function") {
    _$jscoverage['tapi.js'][594]++;
    callback = cursor;
    _$jscoverage['tapi.js'][595]++;
    cursor = null;
  }
  _$jscoverage['tapi.js'][597]++;
  cursor = cursor || {};
  _$jscoverage['tapi.js'][598]++;
  cursor.id = id;
  _$jscoverage['tapi.js'][599]++;
  return this._timeline("comments", user, cursor, callback);
}), comment_create: (function (user, id, comment, callback) {
  _$jscoverage['tapi.js'][617]++;
  if (typeof comment === "string") {
    _$jscoverage['tapi.js'][618]++;
    comment = {comment: comment};
  }
  _$jscoverage['tapi.js'][620]++;
  return this.api_dispatch(user).comment_create(user, id, comment, callback);
}), comment_reply: (function (user, cid, id, comment, callback) {
  _$jscoverage['tapi.js'][638]++;
  if (typeof comment === "string") {
    _$jscoverage['tapi.js'][639]++;
    comment = {comment: comment};
  }
  _$jscoverage['tapi.js'][641]++;
  return this.api_dispatch(user).comment_reply(user, cid, id, comment, callback);
}), comment_destroy: (function (user, cid, callback) {
  _$jscoverage['tapi.js'][652]++;
  return this.api_dispatch(user).comment_destroy(user, cid, callback);
}), get_authorization_url: (function (user, callback) {
  _$jscoverage['tapi.js'][673]++;
  return this.api_dispatch(user).get_authorization_url(user, callback);
}), get_access_token: (function (user, callback) {
  _$jscoverage['tapi.js'][691]++;
  return this.api_dispatch(user).get_access_token(user, callback);
}), verify_credentials: (function (user, callback) {
  _$jscoverage['tapi.js'][709]++;
  return this.api_dispatch(user).verify_credentials(user, callback);
}), user_show: (function (user, uid, screen_name, callback) {
  _$jscoverage['tapi.js'][725]++;
  if (typeof screen_name === "function") {
    _$jscoverage['tapi.js'][726]++;
    callback = screen_name;
    _$jscoverage['tapi.js'][727]++;
    screen_name = null;
  }
  _$jscoverage['tapi.js'][729]++;
  return this.api_dispatch(user).user_show(user, uid, screen_name, callback);
}), rate_limit_status: (function (user, callback) {
  _$jscoverage['tapi.js'][733]++;
  return this.api_dispatch(user).rate_limit_status(user, callback);
}), friends: (function (data, callback, context) {
  _$jscoverage['tapi.js'][746]++;
  return this.api_dispatch(data).friends(data, callback, context);
}), followers: (function (data, callback, context) {
  _$jscoverage['tapi.js'][751]++;
  return this.api_dispatch(data).followers(data, callback, context);
})};
_$jscoverage['tapi.js'][756]++;
TAPI.friends_timeline = TAPI.home_timeline;
_$jscoverage['tapi.js'].source = ["/*!"," * node-weibo - lib/tapi.js"," * Copyright(c) 2012 fengmk2 &lt;fengmk2@gmail.com&gt;"," * MIT Licensed"," */","","\"use strict\";","","/**"," * Module dependencies."," */","","var utils = require('./utils');","var TSinaAPI = require('./tsina');","var TQQAPI = require('./tqq');","var WeiboAPI = require('./weibo');","var GithubAPI = require('./github');","","var TAPI = module.exports = {","  TYPES: {","    weibo: WeiboAPI, // api v2.0","    github: GithubAPI,","    tsina: TSinaAPI, // api v1.0","    // twitter: TwitterAPI,","    tqq: TQQAPI,","    // tsohu: TSOHUAPI ","  },","  ","  enables: {},","  ","  /**","   * Init API options, must init before use it.","   * ","   * @param {String} blogtype, blog api type, e.g.: 'weibo', 'tqq', 'github' and so on.","   * @param {String} appkey","   * @param {String} secret","   * @param {String|Object} [oauth_callback] or [oauth_options]","   *  - {String} [oauth_callback], oauth callback redirect uri.","   *  - {String} [oauth_scope], comma separated list of scopes. e.g.: `status, user`","   * @return {[type]} [description]","   */","  init: function (blogtype, appkey, secret, oauth_options) {","    if (!appkey) {","      throw new TypeError('appkey must be set');","    }","    if (!secret) {","      throw new TypeError('secret must be set');","    }","    if (typeof oauth_options === 'string') {","      oauth_options = {","        oauth_callback: oauth_options","      };","    }","    var TypeAPI = this.TYPES[blogtype];","    if (!TypeAPI) {","      throw new TypeError(blogtype + ' api not exists');","    }","    var options = {","      appkey: appkey,","      secret: secret","    };","    options = utils.extend(options, oauth_options);","    var instance = new TypeAPI(options);","    this.enables[blogtype] = instance;","  },","","  /**","   * Auto detech which API instance to use by user.","   * ","   * @param {User} user","   * @return {API} api instance","   */","  api_dispatch: function (user) {","    var apiType = user.blogtype || user.blogType;","    return this.enables[apiType];","  },","  ","  /**","   * Get api instance config by user","   * ","   * @param {User} user","   * @return {Object} config","   */","  get_config: function (user) {","    return this.api_dispatch(user).config;","  },","","  /**","   * Check api support the method or not.","   * ","   * @param {User} user","   * @param {String} method","   * @return {Boolean} true or false","   */","  support: function (user, method) {","    return this.get_config(user)['support_' + method] !== false;","  },","","  /**","   * Process text to display format.","   * ","   * @param {User} user","   * @param {Status} status","   * @return {String}","   */","  process_text: function (user, status) {","    return this.api_dispatch(user).process_text(status);","  },","","  /**","   * Utils methods","   */","  ","  _timeline: function (method, user, cursor, callback) {","    if (typeof cursor === 'function') {","      callback = cursor;","      cursor = null;","    }","    cursor = cursor || {};","    cursor.count = cursor.count || 20;","    var max_id = cursor.max_id;","    var self = this;","    return self.api_dispatch(user)[method](user, cursor, function (err, result) {","      if (err || !max_id) {","        return callback(err, result);","      }","      max_id = String(max_id);","      // ignore the max_id status","      var needs = [];","      var statuses = result.items || [];","      for (var i = 0, l = statuses.length; i &lt; l; i++) {","        var status = statuses[i];","        if (status.id === max_id) {","          continue;","        }","        needs.push(status);","      }","      result.items = needs;","      callback(null, result);","    });","  },","","  /**","   * Status","   */","","  /**","   * Post a status","   *","   * @param {User} user, oauth user.","   * @param {String|Object} status","   *  - {String} status, content text.","   *  - {Number} [lat], latitude.","   *  - {Number} [long], longitude.","   *  - {String} [annotations], addtional information.","   * @param {Function(Error, Status)} callback","   * @return {Context} this","   */","  update: function (user, status, callback) {","    if (typeof status === 'string') {","      status = {status: status};","    }","    return this.api_dispatch(user).update(user, status, callback);","  },","  ","  /**","   * Post a status contain an image.","   * ","   * @param {User} user, oauth user.","   * @param {String|Object} status","   *  - {String} status, content text.","   *  - {Number} [lat], latitude.","   *  - {Number} [long], longitude.","   *  - {String} [annotations], addtional information.","   * @param {Object} pic","   *  - {Buffer|ReadStream} data","   *  - {String} [name], image file name","   *  - {String} [content_type], data content type","   * @param {Function(Error, Status)} callback","   * @return {Context} this","   */","  upload: function (user, status, pic, callback) {","    if (typeof status === 'string') {","      status = {status: status};","    }","    return this.api_dispatch(user).upload(user, status, pic, callback);","  },","","  /**","   * Repost a status.","   * ","   * @param {User} user","   * @param {String|Number} id, need to repost status id.","   * @param {String|Object} status","   *  - {String} status, content text","   *  - {Number} [lat], latitude.","   *  - {Number} [long], longitude.","   *  - {Boolean} isComment, is comment or not, default is `false`.","   * @param {Function(Error, Status)} callback","   * @return {Context} this","   */","  repost: function (user, id, status, callback) {","    if (typeof status === 'string') {","      status = {status: status};","    }","    id = String(id);","    return this.api_dispatch(user).repost(user, id, status, callback);","  },","","  /**","   * Remove a status by id.","   * ","   * @param {User} user","   * @param {String|Number} id","   * @param {Function(Error, Status)} callback","   * @return {Context} this","   */","  destroy: function (user, id, callback) {","    id = String(id);","    return this.api_dispatch(user).destroy(user, id, callback);","  },","  ","  // upload_pic_url: function (data, pic, callback, context) {","  //   return this.api_dispatch(data).upload_pic_url(data, pic, callback, context);","  // },","","  // // id &#231;&#145;&#158;&#230;&#142;&#168;","  // retweet: function (data, callback, context) {","  //   return this.api_dispatch(data).retweet(data, callback, context);","  // },","  ","  /**","   * Get a status by id.","   * ","   * @param {User} user","   * @param {String|Number} id","   * @param {Function(Error, Status)} callback","   * @return {Context} this","   */","  show: function (user, id, callback) {","    return this.api_dispatch(user).show(user, String(id), callback);","  },","","  /**","   * Get statuses comment count and repost count by ids.","   * ","   * @param {User} user","   * @param {String|Array} ids, separate by comma.","   * @param {Function(err, counts)} callback","   *   - {String} id","   *   - {Number} comments","   *   - {Number} reposts","   * @return {Context} this","   */","  count: function (user, ids, callback) {","    if (Array.isArray(ids)) {","      ids = ids.join(',');","    }","    return this.api_dispatch(user).count(user, ids, callback);","  },","","  /**","   * List home timeline statuses.","   * ","   * @param {User} user","   * @param {Cursor} [cursor]","   *  - {String} since_id","   *  - {String} max_id","   *  - {String} [since_time], only for tqq","   *  - {String} [max_time], only for tqq","   *  - {Number} count, default is `20`","   *  - {Number} page","   * @param {Function(err, result)} callback","   *  {Object} result:","   *   - {Array} items, [Status, ...]","   *   - {Cursor} cursor","   *   - ...","   * @return {Context} this","   */","  home_timeline: function (user, cursor, callback) {","    return this._timeline('home_timeline', user, cursor, callback);","  },","","  /**","   * List home timeline statuses.","   * ","   * @param {User} user","   * @param {Cursor} [cursor]","   *  - {String} since_id","   *  - {String} max_id","   *  - {String} [since_time], only for tqq","   *  - {String} [max_time], only for tqq","   *  - {Number} count, default is `20`","   *  - {Number} page","   * @param {Function(err, result)} callback","   *  {Object} result:","   *   - {Array} items, [Status, ...]","   *   - {Cursor} cursor","   *   - ...","   * @return {Context} this","   */","  public_timeline: function (user, cursor, callback) {","    return this._timeline('public_timeline', user, cursor, callback);","  },","  ","  /**","   * List user personal timeline statuses.","   * ","   * @param {User} user","   * @param {Cursor} [cursor]","   *  - {String} [uid], user id","   *  - {String} [screen_name], `user.screen_name`, screen_name or uid must be set at least one.","   *  - {String} [since_id]","   *  - {String} [max_id]","   *  - {String} [since_time], only for tqq","   *  - {String} [max_time], only for tqq","   *  - {Number} count, default is `20`","   *  - {Number} page","   * @param {Function(err, result)} callback","   *  {Object} result:","   *   - {Array} items, [Status, ...]","   *   - {Cursor} cursor","   *   - ...","   * @return {Context} this","   */","  user_timeline: function (user, cursor, callback) {","    return this._timeline('user_timeline', user, cursor, callback);","  },","","  /**","   * List @me statuses.","   * ","   * @param {User} user","   * @param {Cursor} [cursor]","   *  - {String} since_id","   *  - {String} max_id","   *  - {String} [since_time], only for tqq","   *  - {String} [max_time], only for tqq","   *  - {Number} count, default is `20`","   *  - {Number} page","   * @param {Function(err, result)} callback","   *  {Object} result:","   *   - {Array} items, [Status, ...]","   *   - {Cursor} cursor","   *   - ...","   * @return {Context} this","   */","  mentions: function (user, cursor, callback) {","    return this._timeline('mentions', user, cursor, callback);","  },","","  /**","   * List one status's reposted statuses","   * ","   * @param {User} user","   * @param {String} id, status's id","   * @param {Cursor} [cursor]","   *  - {String} since_id","   *  - {String} max_id","   *  - {String} [since_time], only for tqq","   *  - {String} [max_time], only for tqq","   *  - {Number} count, default is `20`","   *  - {Number} page","   *  - {Number} [filter_by_author], only support by `weibo`;","   *    Filter statuses by author type, 0: all, 1: only I following&#227;&#128;&#129;2: stranger, default is `0`.","   * @param {Function(err, result)} callback","   *  {Object} result:","   *   - {Array} items, [Status, ...]","   *   - {Cursor} cursor","   *   - ...","   * @return {Context} this","   */","  repost_timeline: function (user, id, cursor, callback) {","    if (typeof cursor === 'function') {","      callback = cursor;","      cursor = null;","    }","    cursor = cursor || {};","    cursor.id = id;","    return this._timeline('repost_timeline', user, cursor, callback);","  },","","  /**","   * Search statuses by query.","   * ","   * @param {AccessToken} user","   * @param {String|Object} query","   *  - {String} q, query keyword","   *  - {String} [long], longitude","   *  - {String} [lat], latitude","   *  - {String} [radius], radius for longitude and latitude.","   * @param {Cursor} [cursor]","   *  - {Number} [count], default is `20`","   *  - {Number} [page], default is the first page.","   * @param {Function(err, result)} callback","   * @return {Context} this","   */","  search: function (user, query, cursor, callback) {","    if (typeof query === 'string') {","      query = {","        q: query","      };","    }","    if (typeof cursor === 'function') {","      callback = cursor;","      cursor = null;","    }","    return this.api_dispatch(user).search(user, query, cursor, callback);","  },","","  /**","   * Favorite","   */","","   /**","   * List favorites.","   * ","   * @param {User} user","   * @param {Cursor} [cursor]","   *  - {String} since_id","   *  - {String} max_id","   *  - {String} [since_time], only for tqq","   *  - {String} [max_time], only for tqq","   *  - {Number} count, default is `20`","   *  - {Number} page","   * @param {Function(err, result)} callback","   *  {Object} result:","   *   - {Array} items, [Favorite, ...]","   *   - {Cursor} cursor","   *   - ...","   * @return {Context} this","   */","  favorites: function (user, cursor, callback) {","    return this._timeline('favorites', user, cursor, callback);","  },","","  /**","   * Show a favorite item by item id.","   * ","   * @param {User} user","   * @param {String} id, favorite item's id.","   * @param {Function(err, favorite)} callback","   * @return {Context} this","   */","  favorite_show: function (user, id, callback) {","    return this.api_dispatch(user).favorite_show(user, id, callback);","  },","","  /**","   * Add a status to favorites.","   * ","   * @param {User} user","   * @param {String} id, status's id.","   * @param {Function(err, result)} callback","   *  - {Object} result","   *   - {String} id, relation item's id.","   *   - addtional infomation maybe.","   * @return {Context} this","   */","  favorite_create: function (user, id, callback) {","    return this.api_dispatch(user).favorite_create(user, id, callback);","  },","","  /**","   * Remove the status from favorites.","   * ","   * @param {User} user","   * @param {String} id, the favorite item's id.","   * @param {Function(err, result)} callback","   *  - {Object} result","   *   - {String} id, relation item's id.","   *   - addtional infomation maybe.","   * @return {Context} this","   */","  favorite_destroy: function (user, id, callback) {","    return this.api_dispatch(user).favorite_destroy(user, id, callback);","  },","","  /**","   * Comment","   */","  ","  /**","   * List comments to my statues","   * ","   * @param {User} user","   * @param {Cursor} [cursor]","   *  - {String} since_id","   *  - {String} max_id","   *  - {String} [since_time], only for tqq","   *  - {String} [max_time], only for tqq","   *  - {Number} count, default is `20`","   *  - {Number} page","   * @param {Function(err, result)} callback","   *  {Object} result:","   *   - {Array} items, [Comment, ...]","   *   - {Cursor} cursor","   *   - ...","   * @return {Context} this","   */","  comments_timeline: function (user, cursor, callback) {","    return this._timeline('comments_timeline', user, cursor, callback);","  },","","  /**","   * List @me comments","   * ","   * @param {User} user","   * @param {Cursor} [cursor]","   *  - {String} since_id","   *  - {String} max_id","   *  - {Number} count, default is `20`","   *  - {Number} page","   * @param {Function(err, result)} callback","   *  {Object} result:","   *   - {Array} items, [Comment, ...]","   *   - {Cursor} cursor","   *   - ...","   * @return {Context} this","   */","  comments_mentions: function (user, cursor, callback) {","    return this._timeline('comments_mentions', user, cursor, callback);","  },","","  /**","   * List comments post by me","   * ","   * @param {User} user","   * @param {Cursor} [cursor]","   *  - {String} since_id","   *  - {String} max_id","   *  - {Number} count, default is `20`","   *  - {Number} page","   *  - {Number} [filter_by_source], only support by `weibo`;","   *    Filter comments by source type, 0: all, 1: come from weibo, 2: come from weiqun, default is `0`.","   * @param {Function(err, result)} callback","   *  {Object} result:","   *   - {Array} items, [Comment, ...]","   *   - {Cursor} cursor","   *   - ...","   * @return {Context} this","   */","  comments_by_me: function (user, cursor, callback) {","    return this._timeline('comments_by_me', user, cursor, callback);","  },","","  /**","   * List comments to me","   * ","   * @param {User} user","   * @param {Cursor} [cursor]","   *  - {String} [since_id]","   *  - {String} [max_id]","   *  - {Number} [count], default is `20`","   *  - {Number} [page]","   *  - {Number} [filter_by_author], only support by `weibo`;","   *    Filter comments by author type, 0: all, 1: I following, 2: stranger, default is `0`.","   *  - {Number} [filter_by_source], only support by `weibo`;","   *    Filter comments by source type, 0: all, 1: come from weibo, 2: come from weiqun, default is `0`.","   * @param {Function(err, result)} callback","   *  {Object} result:","   *   - {Array} items, [Comment, ...]","   *   - {Cursor} cursor","   *   - ...","   * @return {Context} this","   */","  comments_to_me: function (user, cursor, callback) {","    return this._timeline('comments_to_me', user, cursor, callback);","  },","  ","  /**","   * List one status's comments","   * ","   * @param {User} user","   * @param {String} id, status's id","   * @param {Cursor} [cursor]","   *  - {String} since_id","   *  - {String} max_id","   *  - {String} [since_time], only for tqq","   *  - {String} [max_time], only for tqq","   *  - {Number} count, default is `20`","   *  - {Number} page","   *  - {Number} [filter_by_author], only support by `weibo`;","   *    Filter comments by author type, 0: all, 1: only I following&#227;&#128;&#129;2: stranger, default is `0`.","   * @param {Function(err, result)} callback","   *  {Object} result:","   *   - {Array} items, [Comment, ...]","   *   - {Cursor} cursor","   *   - ...","   * @return {Context} this","   */","  comments: function (user, id, cursor, callback) {","    if (typeof cursor === 'function') {","      callback = cursor;","      cursor = null;","    }","    cursor = cursor || {};","    cursor.id = id;","    return this._timeline('comments', user, cursor, callback);","  },","","  /**","   * post a comment to a status","   * ","   * @param {AccessToken} user","   * @param {String} id, status's id","   * @param {String|Object} comment","   *  - {String} comment","   *  - {Number} [comment_ori], same comment to the original status when comment on a repost status,","   *    0: no, 1: yes, default is `0`.","   * @param {Function(err, result)} callback","   *  - {Object} result","   *   - {String} id, the comment id","   * @return {Context} this","   */","  comment_create: function (user, id, comment, callback) {","    if (typeof comment === 'string') {","      comment = {comment: comment};","    }","    return this.api_dispatch(user).comment_create(user, id, comment, callback);","  },","  ","  /**","   * reply to a comment","   * @param {AccessToken} user","   * @param {String} cid, comment's id","   * @param {String} id, status's id","   * @param {String|Object} comment","   *  - {String} comment","   *  - {Number} without_mention, don't auto add `'reply@username'` to comment text or not,","   *    0: yes, 1: no, default is `0`, won't auto add.","   *  - {Number} [comment_ori], same comment to the original status when comment on a repost status,","   *    0: no, 1: yes, default is `0`.","   * @param {Function(err, result)} callback","   * @return {Context} this","   */","  comment_reply: function (user, cid, id, comment, callback) {","    if (typeof comment === 'string') {","      comment = {comment: comment};","    }","    return this.api_dispatch(user).comment_reply(user, cid, id, comment, callback);","  },","  ","  /**","   * remove a comment","   * @param {AccessToken} user","   * @param {String} cid, comment's id","   * @param {Function(err, result)} callback","   * @return {Context} this","   */","  comment_destroy: function (user, cid, callback) {","    return this.api_dispatch(user).comment_destroy(user, cid, callback);","  },","","  /**","   * OAuth","   */","  ","  /**","   * Get authorization token and login url.","   * ","   * @param {Object} user","   *  - {String} blogtype, 'weibo' or other blog type,","   *  - {String} oauth_callback, 'login callback url' or 'oob'","   * @param {Function(err, auth_info)} callback","   *  - {Object} auth_info","   *   - {String} auth_url: 'http://xxxx/auth?xxx',","   *   - {String} oauth_token: $oauth_token,","   *   - {String} oauth_token_secret: $oauth_token_secret","   * @return {Context} this, blogType api.","   */","  get_authorization_url: function (user, callback) {","    return this.api_dispatch(user).get_authorization_url(user, callback);","  },","  ","  /**","   * Get access token.","   * ","   * @param {Object} user","   *  - {String} blogtype","   *  - {String} oauth_token, authorization `oauth_token`","   *  - {String} oauth_verifier, authorization `oauth_verifier`","   *  - {String} oauth_token_secret, request token secret","   * @param {Function(err, token)} callback","   *  - {Object} token","   *   - {String} oauth_token","   *   - {String} oauth_token_secret","   * @return {Context} this","   */","  get_access_token: function (user, callback) {","    return this.api_dispatch(user).get_access_token(user, callback);","  },","","  /**","   * User","   */","  ","  /**","   * Get user profile infomation by access token.","   * ","   * @param {Object} user","   *  - {String} blogtype","   *  - {String} oauth_token, access oauth token","   *  - {String} [oauth_token_secret], access oauth token secret, oauth v2 don't need this param.","   * @param {Function(err, User)} callback","   * @return {Context} this","   */","  verify_credentials: function (user, callback) {","    return this.api_dispatch(user).verify_credentials(user, callback);","  },","","  /**","   * Get user profile infomation by uid.","   * @param {Object} user","   *  - {String} blogtype","   *  - {String} oauth_token, access token","   *  - {String} [oauth_token_secret], access oauth token secret, oauth v2 don't need this param.","   * @param {String} [uid], user id","   * @param {String} [screen_name], user screen_name","   *   uid and screen_name MUST set one.","   * @param {Function(err, User)} callback","   * @return {Context} this","   */","  user_show: function (user, uid, screen_name, callback) {","    if (typeof screen_name === 'function') {","      callback = screen_name;","      screen_name = null;","    }","    return this.api_dispatch(user).user_show(user, uid, screen_name, callback);","  },","","  rate_limit_status: function (user, callback) {","    return this.api_dispatch(user).rate_limit_status(user, callback);","  },","  ","  /*","   * id false int64/string  &#231;&#148;&#168;&#230;&#136;&#183;ID(int64)&#230;&#136;&#150;&#232;&#128;&#133;&#230;&#152;&#181;&#231;&#167;&#176;(string)&#227;&#128;&#130;&#232;&#175;&#165;&#229;&#143;&#130;&#230;&#149;&#176;&#228;&#184;&#186;&#228;&#184;&#128;&#228;&#184;&#170;REST&#233;&#163;&#142;&#230;&#160;&#188;&#229;&#143;&#130;&#230;&#149;&#176;&#227;&#128;&#130;&#232;&#176;&#131;&#231;&#148;&#168;&#231;&#164;&#186;&#228;&#190;&#139;&#232;&#167;&#129;&#230;&#179;&#168;&#230;&#132;&#143;&#228;&#186;&#139;&#233;&#161;&#185;","   * user_id  false int64 &#231;&#148;&#168;&#230;&#136;&#183;ID&#239;&#188;&#140;&#228;&#184;&#187;&#232;&#166;&#129;&#230;&#152;&#175;&#231;&#148;&#168;&#230;&#157;&#165;&#229;&#140;&#186;&#229;&#136;&#134;&#231;&#148;&#168;&#230;&#136;&#183;ID&#232;&#183;&#159;&#229;&#190;&#174;&#229;&#141;&#154;&#230;&#152;&#181;&#231;&#167;&#176;&#227;&#128;&#130;&#229;&#189;&#147;&#229;&#190;&#174;&#229;&#141;&#154;&#230;&#152;&#181;&#231;&#167;&#176;&#228;&#184;&#186;&#230;&#149;&#176;&#229;&#173;&#151;&#229;&#175;&#188;&#232;&#135;&#180;&#229;&#146;&#140;&#231;&#148;&#168;&#230;&#136;&#183;ID&#228;&#186;&#167;&#231;&#148;&#159;&#230;&#173;&#167;&#228;&#185;&#137;&#239;&#188;&#140;&#231;&#137;&#185;&#229;&#136;&#171;&#230;&#152;&#175;&#229;&#189;&#147;&#229;&#190;&#174;&#229;&#141;&#154;&#230;&#152;&#181;&#231;&#167;&#176;&#229;&#146;&#140;&#231;&#148;&#168;&#230;&#136;&#183;ID&#228;&#184;&#128;&#230;&#160;&#183;&#231;&#154;&#132;&#230;&#151;&#182;&#229;&#128;&#153;&#239;&#188;&#140;&#229;&#187;&#186;&#232;&#174;&#174;&#228;&#189;&#191;&#231;&#148;&#168;&#232;&#175;&#165;&#229;&#143;&#130;&#230;&#149;&#176;","   * screen_name  false string  &#229;&#190;&#174;&#229;&#141;&#154;&#230;&#152;&#181;&#231;&#167;&#176;&#239;&#188;&#140;&#228;&#184;&#187;&#232;&#166;&#129;&#230;&#152;&#175;&#231;&#148;&#168;&#230;&#157;&#165;&#229;&#140;&#186;&#229;&#136;&#134;&#231;&#148;&#168;&#230;&#136;&#183;UID&#232;&#183;&#159;&#229;&#190;&#174;&#229;&#141;&#154;&#230;&#152;&#181;&#231;&#167;&#176;&#239;&#188;&#140;&#229;&#189;&#147;&#228;&#186;&#140;&#232;&#128;&#133;&#228;&#184;&#128;&#230;&#160;&#183;&#232;&#128;&#140;&#228;&#186;&#167;&#231;&#148;&#159;&#230;&#173;&#167;&#228;&#185;&#137;&#231;&#154;&#132;&#230;&#151;&#182;&#229;&#128;&#153;&#239;&#188;&#140;&#229;&#187;&#186;&#232;&#174;&#174;&#228;&#189;&#191;&#231;&#148;&#168;&#232;&#175;&#165;&#229;&#143;&#130;&#230;&#149;&#176;","   * id, user_id, screen_name &#229;&#143;&#175;&#228;&#187;&#165;&#228;&#187;&#187;&#233;&#128;&#137;&#228;&#184;&#128;&#228;&#184;&#170;&#229;&#143;&#130;&#230;&#149;&#176;&#239;&#188;&#140;&#229;&#156;&#168;3&#228;&#184;&#170;&#233;&#131;&#189;&#228;&#184;&#141;&#230;&#143;&#144;&#228;&#190;&#155;&#231;&#154;&#132;&#230;&#131;&#133;&#229;&#134;&#181;&#228;&#184;&#139;&#239;&#188;&#140;&#231;&#179;&#187;&#231;&#187;&#159;&#232;&#191;&#148;&#229;&#155;&#158;&#229;&#189;&#147;&#229;&#137;&#141;&#231;&#153;&#187;&#229;&#189;&#149;&#231;&#148;&#168;&#230;&#136;&#183;&#231;&#154;&#132;&#229;&#133;&#179;&#230;&#179;&#168;&#229;&#136;&#151;&#232;&#161;&#168;","   * ","   * cursor false int &#231;&#148;&#168;&#228;&#186;&#142;&#229;&#136;&#134;&#233;&#161;&#181;&#232;&#175;&#183;&#230;&#177;&#130;&#239;&#188;&#140;&#232;&#175;&#183;&#230;&#177;&#130;&#231;&#172;&#172;1&#233;&#161;&#181;cursor&#228;&#188;&#160;-1&#239;&#188;&#140;&#229;&#156;&#168;&#232;&#191;&#148;&#229;&#155;&#158;&#231;&#154;&#132;&#231;&#187;&#147;&#230;&#158;&#156;&#228;&#184;&#173;&#228;&#188;&#154;&#229;&#190;&#151;&#229;&#136;&#176;next_cursor&#229;&#173;&#151;&#230;&#174;&#181;&#239;&#188;&#140;&#232;&#161;&#168;&#231;&#164;&#186;&#228;&#184;&#139;&#228;&#184;&#128;&#233;&#161;&#181;&#231;&#154;&#132;cursor&#227;&#128;&#130;next_cursor&#228;&#184;&#186;0&#232;&#161;&#168;&#231;&#164;&#186;&#229;&#183;&#178;&#231;&#187;&#143;&#229;&#136;&#176;&#232;&#174;&#176;&#229;&#189;&#149;&#230;&#156;&#171;&#229;&#176;&#190;&#227;&#128;&#130;","   * count  false int&#239;&#188;&#140;&#233;&#187;&#152;&#232;&#174;&#164;20&#239;&#188;&#140;&#230;&#156;&#128;&#229;&#164;&#167;200  &#230;&#175;&#143;&#233;&#161;&#181;&#232;&#191;&#148;&#229;&#155;&#158;&#231;&#154;&#132;&#230;&#156;&#128;&#229;&#164;&#167;&#232;&#174;&#176;&#229;&#189;&#149;&#230;&#149;&#176;&#239;&#188;&#140;&#230;&#156;&#128;&#229;&#164;&#167;&#228;&#184;&#141;&#232;&#131;&#189;&#232;&#182;&#133;&#232;&#191;&#135;200&#239;&#188;&#140;&#233;&#187;&#152;&#232;&#174;&#164;&#228;&#184;&#186;20&#227;&#128;&#130;","   */","  friends: function (data, callback, context) {","    return this.api_dispatch(data).friends(data, callback, context);","  },","  ","  // &#229;&#144;&#140;friends","  followers: function (data, callback, context) {","    return this.api_dispatch(data).followers(data, callback, context);","  },","  ","};","","TAPI.friends_timeline = TAPI.home_timeline;"];
